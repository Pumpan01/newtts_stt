#http://127.0.0.1:8000/tts/?text=Use%20the%20NVIDIA%20Audio2Face%20headless%20server%20and%20interact%20with%20it%20through%20a%20requests%20API
#http://192.168.1.105:8000/tts/?text=Use%20the%20NVIDIA%20Audio2Face%20headless%20server%20and%20interact%20with%20it%20through%20a%20requests%20API
#‡∏™‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ú‡πà‡∏≤‡∏ô AZure TTS ‡πÑ‡∏õ‡∏¢‡∏±‡∏á NVIDIA Audio2Face ‡∏ú‡πà‡∏≤‡∏ô gRPC Streaming
#‡πÄ‡∏õ‡∏¥‡∏î audio2face ‡πÅ‡∏ö‡∏ö gui ‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏´‡∏•‡∏î lib\site-packages\py_audio2face\assets\mark_arkit_solved_streaming.usd

# uvicorn fastapi_tts:app --reload --app-dir tests
# uvicorn fastapi_tts:app --reload --host 192.168.1.105 --port 8000 --app-dir tests
# uvicorn fastapi_tts:app --reload --host 192.168.1.105 --port 8000

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import threading

# üîó ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ function ‡πÅ‡∏•‡∏∞ signal ‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡∏à‡∏≤‡∏Å test_stream_from_azure
from test_stream_from_azure import (
    tts_with_cancel_on_speech,           # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î (TTS) ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏£‡∏Å
    detect_human_voice_by_stt_continuous, # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡∏Ñ‡πå‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‚Üí ‡πÉ‡∏ä‡πâ STT ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î
    stop_signal,                          # Signal ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏±‡πà‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏á STT
    cancel_signal,                        # Signal ‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ô‡∏û‡∏π‡∏î‡πÅ‡∏ó‡∏£‡∏Å
    start_vad_signal,                     # Signal ‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö VAD (‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î)
    intent_result                          # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏• Intent ‡πÄ‡∏ä‡πà‡∏ô interrupt ‡∏´‡∏£‡∏∑‡∏≠ question
)

# ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á FastAPI app
app = FastAPI()


# ---------------------------
# üì¶ Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö POST API
class Item(BaseModel):
    text: str
    emotion: str = "neutral"   # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° emotion
    gesture: str = "neutral_face"  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° gesture


# ---------------------------
# üîä GET Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏π‡∏î
@app.get("/tts/")
async def tts(text: str):
    if not text:
        raise HTTPException(status_code=400, detail="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå text")

    intent = run_tts_pipeline(text)    # ‡∏£‡∏±‡∏ô TTS Pipeline

    return {
        "message": f"TTS for \"{text}\" finished",
        "intent": intent
    }


# ---------------------------
# üîä POST Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏π‡∏î
@app.post("/speak/")
async def speak(item: Item):
    if not item.text:
        raise HTTPException(status_code=400, detail="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå text")

    print("üîä ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏û‡∏π‡∏î:", item.text)
    print("üòä ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå:", item.emotion)
    print("üï∫ ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á:", item.gesture)

    # ‚úÖ ‡∏û‡∏π‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞ text (‡∏ã‡∏∂‡πà‡∏á‡∏Ñ‡∏∑‡∏≠ answer)
    intent = run_tts_pipeline(item.text)

    return {
        "message": f"TTS for \"{item.text}\" finished",
        "intent": intent
    }


# ---------------------------
# üè† ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
@app.get("/")
async def read_root():
    return {"status": "ok", "message": "Azure TTS + STT Interrupt + Intent API is running"}


# ---------------------------
# üî• Pipeline ‡∏´‡∏•‡∏±‡∏Å ‚Üí ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î + ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ô‡∏û‡∏π‡∏î‡πÅ‡∏ó‡∏£‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
def run_tts_pipeline(text):
    global intent_result

    # ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‚Üí ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå signal ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    stop_signal.clear()                # ‡πÑ‡∏°‡πà‡∏´‡∏¢‡∏∏‡∏î
    cancel_signal.clear()              # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏£‡∏Å
    start_vad_signal.clear()           # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏° VAD
    intent_result = None               # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ú‡∏• intent

    # ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏° Thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö STT ‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    mic_thread = threading.Thread(target=detect_human_voice_by_stt_continuous)
    mic_thread.start()

    try:
        start_vad_signal.set()         # üî• ‡∏™‡∏±‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏° VAD ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏•‡πà‡∏ô TTS

        print(f"‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏π‡∏î: {text}")
        tts_with_cancel_on_speech(text)  # üîä ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏π‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°

        # üî• ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏û‡∏π‡∏î ‡∏°‡∏µ cancel_signal ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏´‡∏° (‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ô‡∏û‡∏π‡∏î‡πÅ‡∏ó‡∏£‡∏Å)
        if cancel_signal.is_set():
            if intent_result == "interrupt":
                # üëâ ‡πÄ‡∏à‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏£‡∏Å ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏π‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠
                print("üëâ ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏£‡∏Å ‚Üí ‡∏û‡∏π‡∏î‡∏ï‡πà‡∏≠‡∏à‡∏ô‡∏à‡∏ö")
                remaining_text = text  # ‚úÖ ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ
                tts_with_cancel_on_speech(remaining_text)

            elif intent_result == "question":
                # üëâ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏π‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á Chatbot (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ)
                print("üëâ ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏π‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°")
                print("ü§ñ [AI] ‚Üí ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ")
                return "question"

        # ‚úÖ ‡∏à‡∏ö ‚Üí ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏• intent ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 'none'
        return intent_result if intent_result else "none"

    finally:
        # ‚úÖ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏Ç‡∏∂‡πâ‡∏ô ‚Üí ‡∏™‡∏±‡πà‡∏á‡∏´‡∏¢‡∏∏‡∏î STT ‡πÅ‡∏•‡∏∞ VAD
        stop_signal.set()
        start_vad_signal.clear()
        mic_thread.join()
        print("üõë ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")



